services:
  # PostgreSQL database for Langfuse
  postgres:
    image: postgres:15-alpine
    container_name: policiytracker-postgres
    environment:
      POSTGRES_DB: langfuse
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d langfuse"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Langfuse for LLM observability
  langfuse-server:
    image: langfuse/langfuse:2
    container_name: policiytracker-langfuse
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "3001:3000"
    environment:
      # Database
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/langfuse
      DIRECT_URL: postgresql://postgres:postgres@postgres:5432/langfuse
      
      # Auth & Security
      NEXTAUTH_SECRET: changeme-nextauth-secret
      NEXTAUTH_URL: http://localhost:3001
      SALT: changeme-salt
      
      # Feature flags
      LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES: "true"
    volumes:
      - langfuse_data:/app/.next
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/public/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Azurite - Azure Storage Emulator for local development
  azurite:
    image: mcr.microsoft.com/azure-storage/azurite:latest
    container_name: policiytracker-azurite
    ports:
      - "10000:10000"  # Blob service
      - "10001:10001"  # Queue service  
      - "10002:10002"  # Table service
    volumes:
      - azurite_data:/data
    command: azurite --blobHost 0.0.0.0 --queueHost 0.0.0.0 --tableHost 0.0.0.0 --location /data --debug /data/debug.log
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "10000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Neo4j - Graph database for GraphRAG
  neo4j:
    image: neo4j:5.26-enterprise
    container_name: policiytracker-neo4j
    ports:
      - "7474:7474"  # HTTP/Browser
      - "7687:7687"  # Bolt
    environment:
      # Authentication
      NEO4J_AUTH: neo4j/password123
      # Enterprise features (evaluation)
      NEO4J_ACCEPT_LICENSE_AGREEMENT: "yes"
      # Memory configuration
      NEO4J_server_memory_heap_initial__size: 512M
      NEO4J_server_memory_heap_max__size: 2G
      NEO4J_server_memory_pagecache_size: 512M
      # Plugins
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      # Database
      NEO4J_dbms_default__database: politicalmonitoring
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    healthcheck:
      test: ["CMD", "neo4j", "status"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Graphiti MCP Server - Temporal knowledge graph
  graphiti-mcp:
    build:
      context: https://github.com/getzep/graphiti.git#main:mcp_server
      dockerfile: Dockerfile
    container_name: policiytracker-graphiti-mcp
    depends_on:
      neo4j:
        condition: service_healthy
    ports:
      - "8000:8000"
    environment:
      # Neo4j connection
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: password123
      # OpenAI for entity extraction
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      MODEL_NAME: gpt-4o-mini
      # Server config
      LOG_LEVEL: "DEBUG"
    command: ["uv", "run", "graphiti_mcp_server.py", "--use-custom-entities"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Airflow services for ETL orchestration
  airflow-postgres:
    image: postgres:15-alpine
    container_name: policiytracker-airflow-postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - airflow_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      timeout: 5s
      retries: 5

  airflow-init:
    image: apache/airflow:2.8.1
    container_name: policiytracker-airflow-init
    depends_on:
      airflow-postgres:
        condition: service_healthy
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow
      - AIRFLOW__CORE__FERNET_KEY=46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
    entrypoint: /bin/bash
    command:
      - -c
      - |
        airflow db migrate &&
        airflow users create \
          --username admin \
          --password admin \
          --firstname Admin \
          --lastname User \
          --role Admin \
          --email admin@example.com

  airflow-webserver:
    image: apache/airflow:2.8.1
    container_name: policiytracker-airflow-webserver
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      airflow-postgres:
        condition: service_healthy
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow
      - AIRFLOW__CORE__FERNET_KEY=46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=true
      - APIFY_API_TOKEN=${APIFY_API_TOKEN}
      - EXA_API_KEY=${EXA_API_KEY}
      - _PIP_ADDITIONAL_REQUIREMENTS=apify-client==1.6.4 pyyaml==6.0.1 aiofiles==23.2.1 structlog==24.1.0 azure-storage-blob==12.19.0 requests==2.31.0 aiohttp==3.9.1 exa-py==1.0.9
      - PYTHONPATH=/opt/airflow:/opt/airflow/src
    volumes:
      - ./src/etl/dags:/opt/airflow/dags
      - airflow_logs:/opt/airflow/logs
      - ./data:/opt/airflow/data
      - ./src:/opt/airflow/src
    ports:
      - "8080:8080"
    command: webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  airflow-scheduler:
    image: apache/airflow:2.8.1
    container_name: policiytracker-airflow-scheduler
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      airflow-postgres:
        condition: service_healthy
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow
      - AIRFLOW__CORE__FERNET_KEY=46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - APIFY_API_TOKEN=${APIFY_API_TOKEN}
      - EXA_API_KEY=${EXA_API_KEY}
      - _PIP_ADDITIONAL_REQUIREMENTS=apify-client==1.6.4 pyyaml==6.0.1 aiofiles==23.2.1 structlog==24.1.0 azure-storage-blob==12.19.0 requests==2.31.0 aiohttp==3.9.1 exa-py==1.0.9
      - PYTHONPATH=/opt/airflow:/opt/airflow/src
    volumes:
      - ./src/etl/dags:/opt/airflow/dags
      - airflow_logs:/opt/airflow/logs
      - ./data:/opt/airflow/data
      - ./src:/opt/airflow/src
    command: scheduler
    healthcheck:
      test: ["CMD", "airflow", "jobs", "check", "--job-type", "SchedulerJob", "--hostname", "$(hostname)"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Open WebUI - Chat interface
  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: policiytracker-open-webui
    ports:
      - "3000:8080"
    environment:
      # Disable authentication for development
      - WEBUI_AUTH=false
      # Configure our political monitoring agent as default
      - OPENAI_API_BASE_URL=http://host.docker.internal:8001
      - OPENAI_API_KEY=dummy-key-not-required
      # Disable Ollama since we're using custom API
      - OLLAMA_BASE_URL=""
      # Set default model
      - DEFAULT_MODELS=political-monitoring-agent
      # UI customization
      - WEBUI_NAME="Political Monitoring Chat"
      - WEBUI_URL=http://localhost:3000
      # Performance and streaming optimizations
      - ENABLE_REALTIME_CHAT_SAVE=false
      # Try to enable streaming by default (if supported)
      - DEFAULT_STREAMING=true
      - STREAMING_ENABLED=true
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - open_webui_data:/app/backend/data
    restart: unless-stopped

volumes:
  postgres_data:
  langfuse_data:
  azurite_data:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  airflow_postgres_data:
  airflow_logs:
  open_webui_data:

networks:
  default:
    name: policiytracker-network