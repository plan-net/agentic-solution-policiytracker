# Kodosumi Political Monitoring Agent Configuration
# Copy this file to .env and update the values as needed

# === Environment ===
ENVIRONMENT=development
LOG_LEVEL=INFO
LOG_FORMAT=json

# === Kodosumi & Ray Configuration ===
RAY_ADDRESS=auto
RAY_NUM_CPUS=4

# === Database Configuration ===
# PostgreSQL is only used by Langfuse (not by the app directly)
POSTGRES_HOST=localhost
POSTGRES_PORT=5432
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres

# === Neo4j Configuration (v0.2.0 - Graphiti) ===
# Neo4j database for temporal knowledge graph
NEO4J_URI=bolt://localhost:7687
NEO4J_USER=neo4j
NEO4J_PASSWORD=password123
GRAPHITI_GROUP_ID=political_monitoring_v2

# === Langfuse Configuration ===
# IMPORTANT: Get your actual API keys from Langfuse UI after first startup
# 
# First-time setup:
# 1. Run: just services-up
# 2. Visit: http://localhost:3001
# 3. Login: admin@policiytracker.local / admin123
# 4. Go to Settings → API Keys → Create new API key
# 5. Replace the values below with your actual keys
#
LANGFUSE_PUBLIC_KEY=pk-lf-your-actual-public-key-from-ui
LANGFUSE_SECRET_KEY=sk-lf-your-actual-secret-key-from-ui
LANGFUSE_HOST=http://localhost:3001


# === Azure Blob Storage Configuration ===
# Set to "true" for Azure Storage integration
USE_AZURE_STORAGE=true

# Azurite (local Azure Storage emulator) for development
AZURE_STORAGE_CONNECTION_STRING=DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://localhost:10000/devstoreaccount1;QueueEndpoint=http://localhost:10001/devstoreaccount1;TableEndpoint=http://localhost:10002/devstoreaccount1;

# === LLM Configuration ===
# Set to "true" to enable LLM integration (costs money!)
LLM_ENABLED=false

# LLM Model Settings (used in Langfuse prompt configs)
LLM_TEMPERATURE=0.3
LLM_MAX_TOKENS=2000
LLM_TIMEOUT_SECONDS=30
LLM_MAX_CONCURRENT=3

# OpenAI Configuration
OPENAI_API_KEY=sk-your-openai-api-key-here
OPENAI_MODEL=gpt-4

# Anthropic Configuration (preferred for analysis tasks)
ANTHROPIC_API_KEY=sk-ant-your-anthropic-api-key-here
ANTHROPIC_MODEL=claude-3-haiku-20240307

# Prompt Management:
# - System tries Langfuse prompts first (with production labels)
# - Falls back to local files in src/prompts/ if unavailable
# - Upload prompts: just upload-prompts
# - Prompts include model config (temperature, max_tokens) from settings above

# === Kodosumi Configuration ===
KODOSUMI_SERVICE_NAME=political-monitoring-agent
RAY_SERVE_PORT=8001
APP_ROUTE_PREFIX=/political-analysis

# Input/Output Configuration (Kodosumi paths)
DEFAULT_INPUT_FOLDER=/data/input
DEFAULT_OUTPUT_FOLDER=/data/output
DEFAULT_CONTEXT_FOLDER=/data/context

# Processing Configuration
PROCESSING_TIMEOUT_SECONDS=600
MAX_DOCUMENT_SIZE_MB=50
CONFIDENCE_THRESHOLD=0.7
PRIORITY_THRESHOLD=70.0
MAX_BATCH_SIZE=1000

# === Security ===
SECRET_KEY=your-secret-key-here-change-in-production
CORS_ORIGINS=["http://localhost:3000", "http://localhost:8000"]


# === Development ===
DEBUG=true

# Development workflow:
# 1. Run: just dev
# 2. Edit: app.py or political_analyzer.py  
# 3. Redeploy: just dev-quick
# 4. Test: http://localhost:3370 (admin/admin)

# === Testing ===
# Tests use mocks and don't require external databases

# === Ray Task Configuration ===
RAY_TASK_MAX_RETRIES=3
RAY_TASK_TIMEOUT_SECONDS=300

# === Performance ===
ENABLE_PERFORMANCE_LOGGING=true
LLM_MAX_CONCURRENT=3
LLM_TIMEOUT_SECONDS=30
LLM_FALLBACK_ENABLED=true

# === Production Configuration ===
# For production deployment, update these values:

# Production Ray cluster:
# RAY_ADDRESS=ray://your-ray-cluster:10001

# Production Azure Storage:
# AZURE_STORAGE_CONNECTION_STRING=DefaultEndpointsProtocol=https;AccountName=youraccountname;AccountKey=youraccountkey==;EndpointSuffix=core.windows.net


# Production Langfuse:
# LANGFUSE_HOST=https://cloud.langfuse.com
# LANGFUSE_PUBLIC_KEY=pk-lf-production-key
# LANGFUSE_SECRET_KEY=sk-lf-production-key

# Production security:
# SECRET_KEY=your-production-secret-key